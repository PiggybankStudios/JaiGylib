[ ] gy_bezier.h
[ ] gy_hash.h
[ ] gy_memory.h
[ ] gy_time.h
[ ] gy_random.h
[ ] gy_unicode.h
[ ] gy_string.h
[ ] gy_string_fifo.h

[ ] gy_audio.h
[ ] gy_basis_vectors.h
[ ] gy_bucket_array.h
[ ] gy_collision.h
[ ] gy_cyclic_functions.h
[ ] gy_defines_check.h
[ ] gy_extras.h
[ ] gy_linked_list.h
[ ] gy_lookup.h
[ ] gy_math.h
[ ] gy_noise.h
[ ] gy_parsing.h
[ ] gy_primitives.h
[ ] gy_sorting.h
[ ] gy_std.h
[ ] gy_str_hash_dictionary.h
[ ] gy_temp_memory.cpp
[ ] gy_test_floatscan.h
[ ] gy_triangulation.h
[ ] gy_types.h
[ ] gy_variable_array.h
[ ] gy_word_tree.h
[?] gy_basic_macros.h
[?] gy.h

[ ] Modify a tagged struct?

[X] gy_rays.h
[X] gy_standard_colors.h
[X] gy_quaternions.h
[X] gy_matrices.h
[X] gy_colors.h
(X) gy_debug.h
(X) gy_easing.h
[X] Make a polymorphic struct?
[X] Read some how_tos
[X] Finish gy_intrinsics.h
[X] gy_directions.h
[X] Turn gylib into a proper module
[X] gy_assert.h
[x] gy_rectangles.h
[x] gy_vectors.h

# Line Counts
	[ ] 2,756 - Jan 7th 2023

# jai -help
	Available Command-Line Arguments:
	
	-x64             Use the x64 backend by default (unless overridden by a metaprogram).
	-llvm            Use the LLVM backend by default (unless overridden by a metaprogram).
	                     The LLVM backend is the default normally, so this isn't too useful.
	-add arg         Add the string 'arg' to the target program as code.
	                     Example: -add "MY_VARIABLE :: 42";
	-run arg         Start a #run directive that parses and runs 'arg' as code.
	                     Example: -run write_string(\"Hello!\n\")
	                     (The extra backslashes are the shell's fault.)
	-exe name        Set output_executable_name on the target workspace to 'name'.
	-import_dir arg  Add this directory to the list of directories searched by #import. Can be
	                     used multiple times.
	-debugger        If there is a crash in compile-time execution, drop into the interactive debugger.
	-debug_for       Enable debugging of for_expansion macros. (Otherwise the debugger will never step into them to make stepping through for loops more convenient.)
	-msvc_format     Use Visual Studio's message format for error messages.
	-natvis          Use natvis compatible type names in debug info (array<T> instead of [] T, etc).
	-no_color        Disable ANSI terminal coloring in output messages.
	-no_dce          Turn off dead code elimination. This is a temporary option,
	                     provided because dead code elimination is a new and potentially
	                     unstable feature. This will eventually be removed; the preferred way
	                     to turn off dead code elimination is via Build_Options.
	-no_cwd          Turn off the compiler's initial change of working directory. This is a temporary option,
	                     provided because the policy around working directories is new and is still
	                     being worked out.
	-no_check        Do not import modules/Check and run it on the code. The result will be that you won't get
	                     augmented error checking for stuff like print() calls. Use this if you want to substitute
	                     your own error checking plugin, or for higher speeds in builds known to be good.
	-no_check_bindings Disable checking of module bindings when running modules/Check. If modules/Check is not run
	                     due to -no_check, this does nothing.
	-release         Build a release build, i.e., tell the default metaprogram to disable stack traces and enable optimizations.
	-plug name       Import module 'name' into the metaprogram and use it as a plugin.
	-verbose         Output some extra information about what this metaprogram is doing.
	-version         Print the version of the compiler.
	-no_backtrace_on_crash    Do not catch OS-level exceptions and print a stack trace when your program crashes.
	                              Causes less code to be imported on startup. Depending on your OS (for example, on Windows),
	                              crashes may look like silent exits.
	-                Every argument after - is ignored by the compiler itself,
	                     and is passed to the user-level metaprogram for its own use.
	
	Any argument not starting with a -, and before a - by itself, is the name of a file to compile.
	
	Example:    jai -x64 program.jai - info for -the compile_time execution
	
	There are also a few very tweaky compiler-front-end options that almost nobody
	will ever care about. To see these, do:
	
	            jai -- help
	Developer options: import_dir name, meta metaprogram_name, no_jobs, randomize, seed some_number, extra, chaos.
	
	And that's all.
	Unlike most contemporary compilers, we don't have a huge number of arcane arguments
	to control all kinds of minute things, that you have to spend a long time learning about.
	Our philosophy is, it's much more effective to do configuration from code, where
	you have a great deal of precise control over what's happening, options can be expressed
	as easy-to-understand data structures, and so forth. To get started, look into Build_Options
	in modules/Compiler/Compiler.jai, or look at the how_to program that isn't written yet but
	will be eventually.)
	
	---- Plugin 'Check' provides no help.
#

# Context Printout:
{
	{
		thread_index = 0;
		allocator = {procedure 0x7ff7_c61f_5ca0, null};
		logger = procedure 0x7ff7_c61f_f970;
		logger_data = null;
		log_source_identifier = 0;
		log_level = NORMAL;
		temporary_storage = 7ff7_c622_f000;
		dynamic_entries = [
			{(null), null},
			{(null), null},
			{(null), null},
			{(null), null},
			{(null), null},
			{(null), null},
			{(null), null},
			{(null), null},
			{(null), null},
			{(null), null},
			{(null), null},
			{(null), null},
			{(null), null},
			{(null), null},
			{(null), null},
			{(null), null}
		];
		num_dynamic_entries = 0;
		stack_trace = ad_2471_cf78;
		assertion_failed = procedure 0x7ff7_c620_5ac0;
		handling_assertion_failure = false;
	},
	{
		default_format_int = {
			formatter = {(zero-initialized Any)};
			base = 10;
			minimum_digits = 1;
			padding = 48;
			digits_per_comma = 0;
			comma_string = "";
		};
		default_format_float = {
			{ (zero-initialized Any) },
			-1,
			-1,
			YES,
			DECIMAL
		};
		default_format_struct = {
			formatter = {(zero-initialized Any)};
			draw_type_name = false;
			use_long_form_if_more_than_this_many_members = 5;
			separator_between_name_and_value = " = ";
			short_form_separator_between_fields = ", ";
			long_form_separator_between_fields = "; ";
			begin_string = "{";
			end_string = "}";
			indentation_width = 4;
			use_newlines_if_long_form = false;
		};
		default_format_array = {
			formatter = {(zero-initialized Any)};
			separator = ", ";
			begin_string = "[";
			end_string = "]";
			printing_stopped_early_string = "...";
			draw_separator_after_last_element = false;
			stop_printing_after_this_many_elements = 100;
		};
		default_format_absolute_pointer = {
			formatter = {(zero-initialized Any)};
			base = 16;
			minimum_digits = 1;
			padding = 48;
			digits_per_comma = 4;
			comma_string = "_";
		};
		struct_printer = null;
		struct_printer_data = null;
		indentation_depth = 2;
		log_runtime_errors = true;
	},
	33
}

# Compile Options Printout:
{
	output_type = EXECUTABLE;
	output_flags = 0;
	output_executable_name = "JaiGylibTest.exe";
	output_path = "C:\gamedev\projects\JaiGylib\build";
	intermediate_path = ".build/";
	entry_point_name = "";
	compile_time_command_line = [];
	temporary_storage_size = 32768;
	import_path = ["C:/Users/robbitay/Documents/MyStuff/Programs/jai/modules/"];
	additional_linker_arguments = [];
	user_data_u64 = 0;
	user_data_string = "";
	user_data_pointer = null;
	user_data_pointer_size = 0;
	Commonly_Propagated =
	{
		optimization_level = DEBUG;
		write_added_strings = true;
		runtime_storageless_type_info = false;
		shorten_filenames_in_error_messages = false;
		use_visual_studio_message_format = false;
		use_natvis_compatible_types = false;
		minimum_macos_version = {10, 14};
		use_custom_link_command = false;
		lazy_foreign_function_lookups = false;
		disable_redzone = false;
		enable_bytecode_inliner = false;
		stack_trace = true;
		enable_auto_dereference = true;
		use_ansi_color = true;
		interactive_bytecode_debugger = false;
		debug_for_expansions = false;
		enable_frame_pointers = true;
		array_bounds_check = ON;
		cast_bounds_check = FATAL;
		math_bounds_check = NONFATAL;
		null_pointer_check = ON;
		dead_code_elimination = MODULES_ONLY;
		backtrace_on_crash = ON;
		info_flags = 0;
		text_output_flags = OUTPUT_LINK_LINE | OUTPUT_TIMING_INFO;
		os_target = WINDOWS;
		backend = LLVM;
		machine_type = (enum out of range: 114);
		machine_options = [0, 111, 0, 16, 129, 136, 6, 1, 34, 216, 66, 0, 0, 0, 0, 0, 0, 0, 40, 33, 1, 0, 0, 0, 0, 0, 0, 8, 1, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0...];
		emit_debug_info = DEFAULT;
		maximum_polymorph_depth = 100;
		maximum_array_count_before_compile_time_returns_are_not_reflected_in_ast = 5000;
		x64_options = {false, false, true};
		llvm_options =
		{
			function_sections = false;
			enable_tail_calls = false;
			enable_loop_unrolling = false;
			enable_slp_vectorization = false;
			enable_loop_vectorization = false;
			reroll_loops = false;
			verify_input = false;
			verify_output = false;
			merge_functions = false;
			disable_inlining = true;
			disable_mem2reg = false;
			enable_split_modules = true;
			output_bitcode_before_optimizations = false;
			output_llvm_ir_before_optimizations = false;
			output_bitcode = false;
			output_llvm_ir = false;
			target_system_triple = "";
			target_system_cpu = "";
			target_system_features = "";
			command_line = [];
			code_gen_optimization_level = 0;
			code_gen_size_level = 0;
		};
	};
}
